//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""0b95330f-cd5a-4008-a0d3-a3e227cedbbd"",
            ""actions"": [
                {
                    ""name"": ""Walking"",
                    ""type"": ""Value"",
                    ""id"": ""e165acff-2c9a-4b69-81ab-b27e1304cb44"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interacting"",
                    ""type"": ""Button"",
                    ""id"": ""c46ffdd3-c975-4d35-8e77-ac7623250a5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""cff457fa-d9d6-4a51-8954-490c74f74a5b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Lighting"",
                    ""type"": ""Button"",
                    ""id"": ""951d3a0c-7f4d-4d72-8277-1ad49f6da838"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""da2b7f10-87c6-483c-914b-4f81f4a7be01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""9e02897e-a78f-4c4a-8cd9-e12815e5f41d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""c04eb970-649a-4145-a14c-c07a27673ab9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""425b82dd-150e-4423-96e5-71f41afd730e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""0dedf866-2399-4d28-a720-fdd8ec706802"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""c2ba1f89-8802-427a-99de-f90bc64cf14a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8a70f204-d4aa-4eb9-9898-b4032ab87949"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interacting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""388c989d-e603-4005-93e5-b169a2ff845c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca89c7f0-1efd-4104-8f3d-84bd7232a18c"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lighting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20eca654-1ce4-4888-b63c-2fc26a364837"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerInspect"",
            ""id"": ""dcce1872-72cc-4f0a-a4f4-c32c775518d8"",
            ""actions"": [
                {
                    ""name"": ""Inspecting"",
                    ""type"": ""Value"",
                    ""id"": ""2d8f6530-55b1-41de-9984-5e35b63652b2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotating"",
                    ""type"": ""Value"",
                    ""id"": ""cea63b17-8afe-480a-a751-0e09af25c6e7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0bfb750c-967e-4a90-a920-8eed7b16c250"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inspecting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d86bba70-7883-457c-a817-afa40bf5d5da"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotating"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Walking = m_PlayerMovement.FindAction("Walking", throwIfNotFound: true);
        m_PlayerMovement_Interacting = m_PlayerMovement.FindAction("Interacting", throwIfNotFound: true);
        m_PlayerMovement_Look = m_PlayerMovement.FindAction("Look", throwIfNotFound: true);
        m_PlayerMovement_Lighting = m_PlayerMovement.FindAction("Lighting", throwIfNotFound: true);
        m_PlayerMovement_Drop = m_PlayerMovement.FindAction("Drop", throwIfNotFound: true);
        // PlayerInspect
        m_PlayerInspect = asset.FindActionMap("PlayerInspect", throwIfNotFound: true);
        m_PlayerInspect_Inspecting = m_PlayerInspect.FindAction("Inspecting", throwIfNotFound: true);
        m_PlayerInspect_Rotating = m_PlayerInspect.FindAction("Rotating", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_Walking;
    private readonly InputAction m_PlayerMovement_Interacting;
    private readonly InputAction m_PlayerMovement_Look;
    private readonly InputAction m_PlayerMovement_Lighting;
    private readonly InputAction m_PlayerMovement_Drop;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walking => m_Wrapper.m_PlayerMovement_Walking;
        public InputAction @Interacting => m_Wrapper.m_PlayerMovement_Interacting;
        public InputAction @Look => m_Wrapper.m_PlayerMovement_Look;
        public InputAction @Lighting => m_Wrapper.m_PlayerMovement_Lighting;
        public InputAction @Drop => m_Wrapper.m_PlayerMovement_Drop;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @Walking.started += instance.OnWalking;
            @Walking.performed += instance.OnWalking;
            @Walking.canceled += instance.OnWalking;
            @Interacting.started += instance.OnInteracting;
            @Interacting.performed += instance.OnInteracting;
            @Interacting.canceled += instance.OnInteracting;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Lighting.started += instance.OnLighting;
            @Lighting.performed += instance.OnLighting;
            @Lighting.canceled += instance.OnLighting;
            @Drop.started += instance.OnDrop;
            @Drop.performed += instance.OnDrop;
            @Drop.canceled += instance.OnDrop;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @Walking.started -= instance.OnWalking;
            @Walking.performed -= instance.OnWalking;
            @Walking.canceled -= instance.OnWalking;
            @Interacting.started -= instance.OnInteracting;
            @Interacting.performed -= instance.OnInteracting;
            @Interacting.canceled -= instance.OnInteracting;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Lighting.started -= instance.OnLighting;
            @Lighting.performed -= instance.OnLighting;
            @Lighting.canceled -= instance.OnLighting;
            @Drop.started -= instance.OnDrop;
            @Drop.performed -= instance.OnDrop;
            @Drop.canceled -= instance.OnDrop;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // PlayerInspect
    private readonly InputActionMap m_PlayerInspect;
    private List<IPlayerInspectActions> m_PlayerInspectActionsCallbackInterfaces = new List<IPlayerInspectActions>();
    private readonly InputAction m_PlayerInspect_Inspecting;
    private readonly InputAction m_PlayerInspect_Rotating;
    public struct PlayerInspectActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerInspectActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inspecting => m_Wrapper.m_PlayerInspect_Inspecting;
        public InputAction @Rotating => m_Wrapper.m_PlayerInspect_Rotating;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInspect; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInspectActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInspectActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInspectActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInspectActionsCallbackInterfaces.Add(instance);
            @Inspecting.started += instance.OnInspecting;
            @Inspecting.performed += instance.OnInspecting;
            @Inspecting.canceled += instance.OnInspecting;
            @Rotating.started += instance.OnRotating;
            @Rotating.performed += instance.OnRotating;
            @Rotating.canceled += instance.OnRotating;
        }

        private void UnregisterCallbacks(IPlayerInspectActions instance)
        {
            @Inspecting.started -= instance.OnInspecting;
            @Inspecting.performed -= instance.OnInspecting;
            @Inspecting.canceled -= instance.OnInspecting;
            @Rotating.started -= instance.OnRotating;
            @Rotating.performed -= instance.OnRotating;
            @Rotating.canceled -= instance.OnRotating;
        }

        public void RemoveCallbacks(IPlayerInspectActions instance)
        {
            if (m_Wrapper.m_PlayerInspectActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInspectActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInspectActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInspectActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInspectActions @PlayerInspect => new PlayerInspectActions(this);
    public interface IPlayerMovementActions
    {
        void OnWalking(InputAction.CallbackContext context);
        void OnInteracting(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnLighting(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
    }
    public interface IPlayerInspectActions
    {
        void OnInspecting(InputAction.CallbackContext context);
        void OnRotating(InputAction.CallbackContext context);
    }
}
